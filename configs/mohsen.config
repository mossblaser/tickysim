################################################################################
# A config file describing a SpiNNaker system as much like Mohsen's FPGA
# simulator as possible.
################################################################################

# Configuration parameters controling the model to be simulated
model: {
	# Network parameters
	network: {
		# Network topology
		#   "torus" -- A "rectangular" hexagonal torus network where each node has
		#              six links and links at the outer edges of the network
		#              wrap-around. This topology is the one intended for large
		#              real-world SpiNNaker systems. The size of the network is
		#              specified by the torus_width/torus_height parameters.
		#   "mesh" -- A "rectangular" hexagonal mesh network where each node (except
		#             those on the edges) has six links. Links at the edge of the
		#             mesh do not wrap around. The width and height can be specified
		#             by the mesh_width/mesh_height parameters.
		#   "board_mesh" -- A "hexagonal" hexagonal mesh network where each node
		#                   (except those on the edges) has six links. The nodes are
		#                   arranged in a hexagon as in the SpiNNaker boards. This
		#                   topology is the one used by single board SpiNNaker
		#                   systems. The size of the network is defined by the
		#                   board_mesh_radius parameter.
		topology: "torus";
		
		# The width and height of the torus network topology
		#
		#    \ / \ / \ /
		#   --#---#---#---   -,
		#    / \ / \ / \ /     \
		#     --#---#---#---    >  Height
		#      / \ / \ / \ /     \
		#       --#---#---#---   -'
		#        / \ / \ / \
		#
		#            `---v---'
		#              Width
		torus_width: 12;
		torus_height: 12;
		
		# The width and height of a mesh network topology
		#
		#     #---#---#   -,
		#      \ / \ / \    \
		#       #---#---#    >  Height
		#        \ / \ / \    \
		#         #---#---#   -'
		#
		#           `---v---'
		#             Width
		mesh_width: 2;
		mesh_height: 1;
		
		# The size of a board_mesh topology is defined by its radius. The nodes in
		# the figure below show the sizes of a mesh of various radii.
		#
		#         3---3---3
		#        / \ / \ / \
		#       3---2---2---3
		#      / \ / \ / \ / \
		#     3---2---1---2---3
		#    / \ / \ / \ / \ / \
		#   3---2---1---1---2---3
		#    \ / \ / \ / \ / \ /
		#     3---2---2---2---3
		#      \ / \ / \ / \ /
		#       3---3---3---3
		#
		# A board_mesh with radius of 4 is used by the SpiNNaker Spinn-4 and Spinn-5
		# boards.
		board_mesh_radius: 4;
	}
	
	# Parameters for the router model in each node.
	router: {
		# Period at which the pipeline is advanced and packets can be accepted or
		# forwarded/dropped.
		period: 1;
		
		# Number of pipeline stages. If the pipeline is 1 stage, a packet can enter
		# (if the pipeline isn't stalled and full) in one period and is
		# forwarded/dropped (if possible) in the next.
		pipeline_length: 4;
		
		# Should emergency routing be attempted when packets time out? Note that
		# this is only supported for the "torus" topology.
		use_emergency_routing: False;
		
		# The timeout (in periods) before trying emergency routing. If emergency
		# routing is disabled or the packet is in the second leg of an emergency
		# route, this is the timeout before it is dropped.
		first_timeout: 50;
		
		# The timeout before a packet which has not yet started its emergency route
		# can wait (in periods) before it is dropped.
		final_timeout: 50;
	}
	
	# The connections between nodes consting of a buffer and delay link. Two of
	# these are used per direction for full duplex communication. The buffers
	# model the output buffering/desynchronisation that exists in SpiNNaker. The
	# delay links model the request/acknowedge chip-to-chip delays.
	#
	# Actually implemented as:
	#
	#    ,---------------,   ,-------,   ,--------------,
	# -->| Output Buffer |-->| Delay |-->| Input Buffer |-->
	#    '---------------'   '-------'   '--------------'
	node_to_node_links: {
		# The length of the two buffers.
		output_buffer_length: 2;
		input_buffer_length: 2;
		
		# Number of cycles each packet takes to progress from the first buffer to
		# the second. If a simulator tick is one router cycle @ 200MHz then a tick
		# simulates 5ns of time. If the packet delay is 160ns (for a 40bit packet)
		# the packet delay should be 32 cycles.
		packet_delay: 16;
	}
	
	# Parameters for the tree of arbiters which merge the 7 incoming buffers of
	# packets into a single buffer that the router deals with.
	#
	# The arbiter tree looks like this (with the levels indicated below):
	#
	#        |\                                         ,------ KEY --------,
	#     E--| |_,--,_                                  |                   |
	#     S--| | '--' |    |\                           |             |\    |
	#        |/       `----| |_,--,_                    | Merger:  ---| |__ |
	#                 ,----| | '--' |                   |          ---| |   |
	#        |\       |    |/       |   |\              |             |/    |
	#    NE--| |_,--,_|             '---| |_,--,___     |                   |
	#     N--| | '--'               ,---| | '--'        | Buffer:  __,--,__ |
	#        |/            |\       |   |/              |            '--'   |
	#                 ,----| |_,--,_|                   '-------------------'
	#        |\       | ,--| | '--'
	#     W--| |_,--,_| |  |/
	#    SW--| | '--'   |
	#        |/         |
	#                   |
	#     L-------------'
	#
	#      `----v----'   `----v----'    `----v----'
	#         Lvl2           Lvl1           Root
	#
	# The period is the period of the merger (i.e. the number of ticks between
	# forwarding each incoming packet). The buffer_length is the length of the
	# buffer after each arbiter.
	arbiter_tree: {
		root: { period: 1; buffer_length: 2; }
		lvl1: { period: 1; buffer_length: 1; }
		lvl2: { period: 1; buffer_length: 1; }
	}
	
	# Each node contains a packet generator which at a regular period will
	# randomly drop a packet into the local input port of the node.
	packet_generator: {
		# How frequently to (possibly) drop a packet into the network
		period: 1;
		
		# A list of nodes which are allowed to generate packets. If empty, all
		# nodes may send packets.
		generator_mask: ( (0,0)
		                );
		
		# How should packets be generated over time?
		temporal: {
			# The temporal distribution to use.
			#   "bernoulli" -- Flip a weighted coin each period and use that to decide
			#                  whether to try and send a packet. If the output is
			#                  blocked, give up immediately. The probability is set
			#                  using the bernoulli_prob parameter.
			#   "periodic" -- Try to send a packet at a regular interval. If the
			#                 output is blocked keep trying until it succeeds. The
			#                 next attempt will occur periodic_interval ticks after
			#                 the packet is sent. This means that over time the period
			#                 will shift. Note that in this mode the packets_offered
			#                 metric includes all repeated attempts at resending a
			#                 packet and so nolonger reflects the offered load.
			dist: "periodic";
			
			# The probability of dropping a packet into the network (used by the
			# "bernoulli" temporal distribution)
			bernoulli_prob: 0.0;
			
			# The interval between packet send attempts for the periodic_interval
			# (used by the "periodic" temporal distribution)
			periodic_interval: 16;
		}
		
		# The distribution of generated packet destinations.
		spatial: {
			# Spatial distributions
			#   "cyclic" -- Cycle through all nodes in the system starting with the
			#               current node
			#   "unform" -- Pick destinations at random using a uniform distribution.
			#   "p2p" -- Takes a list (p2p_pairs) of sender-receiver pairs where any
			#            given node may only send to exactly zero or one other node.
			#            Those nodes denoted as senders will then send packets to
			#            their destination receiver and all other nodes will not
			#            generate any packets.
			#   "complement" -- Each node should send packets to the node whose
			#                   coordinates are those of the sender reflected on the X
			#                   and Y axes:
			#                     Target_x = Width  - Source_x - 1
			#                     Target_y = Height - Source_y - 1.
			#                   Only valid for rectangular topologies.
			#   "transpose" -- Each node should send packets to the node whose
			#                  coordinates are those of the sender swapped arround:
			#                    Target_x = Source_y
			#                    Target_y = Source_x
			#                  Only valid for rectangular topologies.
			#   "tornado" -- Each node should send packets to the node half-way around
			#                the network to the right:
			#                  Target_x = ((Width/2) + Source_x) % Width
			#                  Target_y = Source_y
			#                Only valid for rectangular topologies.
			dist: "cyclic";
			
			# Should messages to the local core be generated?
			allow_local: False;
			
			# A list of sender/receiver pairs. Note that a given node may only send
			# packets to at most one other node. Nodes are given as (x,y) coordinates.
			# (Used by the p2p distribution.)
			p2p_pairs: ( ((0,0), (1,0))
			           );
			
		}
		
		# How long should the buffer be that connects the packet generator to the
		# arbiter tree?
		buffer_length: 2;
	}
	
	# Each node contains a packet consumer which will accept packets at a given
	# interval and with a given probability.
	packet_consumer: {
		# How frequently should a packet (possibly) be accepted?
		period: 1;
		
		# How should packets be consumed over time?
		temporal: {
			# The temporal distribution to use.
			#   "bernoulli" -- Flip a weighted coin each period and use that to decide
			#                  whether to try and consume a packet. If the input is
			#                  empty, give up immediately. The probability is set
			#                  using the bernoulli_prob parameter.
			#   "periodic" -- Try to send a packet at a regular interval. If the
			#                 input is empty keep trying until a packet is consumed.
			#                 The next attempt will occur periodic_interval ticks
			#                 after the packet is received. This means that over time the
			#                 period will shift.
			dist: "periodic";
			
			# The probability of consuming a packet into the network (used by the
			# "bernoulli" temporal distribution)
			bernoulli_prob: 0.0;
			
			# The interval between packet send attempts for the periodic_interval
			# (used by the "periodic" temporal distribution)
			periodic_interval: 10;
		}
		
		# How long should the buffer be that connects the packet generator to the
		# router?
		buffer_length: 2;
	}
}

# What results should be recorded?
measurements: {
	# The directory where all results will be dumped
	results_directory: "results/";
	
	# Count the global totals of each of these values
	global_counters: {
		# Count the number of packets offerred by the packet generators
		packets_offered: False;
		
		# Count the number of packets accepted from the packet generators
		packets_accepted: False;
		
		# Count the number of packets arriving at destinations
		packets_arrived: False;
		
		# Count the number of packets dropped in the system
		packets_dropped: False;
		
		# Count the number of packets forwarded by routers in the system
		packets_forwarded: False;
	}
	
	# Count each of these values for each individual node (e.g. for use in a
	# heatmap)
	per_node_counters: {
		# Count the number of packets offerred by the packet generators
		packets_offered: False;
		
		# Count the number of packets accepted from the packet generators
		packets_accepted: True;
		
		# Count the number of packets arriving at destinations
		packets_arrived: True;
		
		# Count the number of packets dropped in the system
		packets_dropped: True;
		
		# Count the number of packets forwarded by routers in the system
		packets_forwarded: True;
	}
	
	# Record information about the route taken by all delivered/dropped packets in
	# the system.
	packet_details: {
		# Record data for successfully delivered packets
		delivered_packets: False;
		
		# Record data for dropped packets
		dropped_packets: False;
	}
	
	# Record information about the simulator's performance
	simulator: {
		# Record the number of simulator ticks during warmup
		warmup_ticks: True;
		
		# Record the wall-clock time taken to run the warmup (seconds)
		warmup_duration: True;
		
		# Record the total number of packets allocated in the packet pool (in
		# packets) during the warmup. Note that if not using a cold start, this may
		# be more than neccessary.
		warmup_packet_pool_size: True;
		
		# As above but during the sample period
		sample_ticks: True;
		
		# As above but during the sample period
		sample_duration: True;
		
		# As above but during the sample period
		sample_packet_pool_size: True;
	}
}

# Configuration parameters controlling the experement. An experemental run
# consists of a set of 'groups' which represent runs of the experiment with some
# independent variables changed. The simulation will be run multiple times for
# each group producing a set of 'samples' for each group.
experiment: {
	# Seed for the random number generator. Comment out to seed with system time
	seed: 100;
	
	# Warmup periods (in ticks)
	warmup_duration: {
		# Warmup period after the simulation has been reset (i.e. from cold)
		cold: 1000000;
		
		# Warmup period after paramter changes when no reset is being performed
		hot: 1000000;
	};
	
	
	# Should the simulation be reset (and re-warmed) between samples
	cold_sample: True;
	
	# Should the simulation be reset (and re-warmed) between groups (i.e. after a
	# parameter change)? If cold_sample is true, the simulation is reset
	# regardless of this value.
	#
	# Note that most parameters cannot be changed during the simulation, for
	# example sizes of buffers and pipelines, periods etc.. As a result,
	# cold_group may have to be set to True depending on the independent variables
	# chosen.
	cold_group: True;
	
	# The number of ticks in each sample
	sample_duration: 60000;
	
	# The number of samples for each group
	num_samples: 1;
	
	# A list of pairs of independent variables and a column heading for
	# the result files.
	independent_variables: ( ("model.packet_generator.spatial.dist", "distribution")
	                       , ("model.packet_generator.temporal.periodic_interval", "inj_interval")
	                       );
	
	# The values of the above independent variables for each experimental group
	groups: ( ("cyclic",  16)
	        , ("cyclic",  32)
	        , ("cyclic", 120)
	        );
	
	# Utility options for running multiple instances of the simulator across many
	# machines using tools such as gnu parallel. These settings should generally
	# be set (overridden) via the command-line rather than in the config file.
	#
	# For example, if there are 10 groups and 5 samples per group the following
	# would run the experiments in parallel.
	#   $ NUM_GROUPS=10
	#   $ NUM_SAMPLES=10
	#   $ parallel -a <(seq $NUM_GROUPS) -a <(seq $NUM_SAMPLES) \
	#       ./tickysim_spinnaker my_config_file.config          \
	#                            experiment.parallel.group={1}  \
	#                            experiment.parallel.sample={2} \
	#                            measurements.results_directory=results/{1}_{2}_
	# The results files for the runs would then be placed in results/ and prefixed
	# with the group and experiment number.
	parallel: {
		# If 0, execution proceeds normally. If a group number, only the specified
		# group is executed. This requires that experiment.cold_group = True.  Note
		# that group numbers start from 1.
		group: 0;
		
		# If 0, execution proceeds normally. If a sample number, only the specified
		# sample is executed. This requires that experiment.cold_sample = True. Note
		# that sample numbers start from 1.
		sample: 0;
	}
}

